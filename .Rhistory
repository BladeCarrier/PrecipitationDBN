182917/94
182917/94/192
nas = dec.small[9,,]
which(is.na(nas))
which(is.na(dec.small[1,,]))
which(is.na(dec.small[2,,]))
which(is.na(dec.small[3,,]))
which(is.na(dec.small[4,,]))
which(is.na(dec.small[5,,]))
which(is.na(dec.small[6,,]))
which(is.na(dec.small[7,,]))
nas = dec.small[7,,]
which(is.na(nas))
12195/94
which(is.na(nas[100:150,]))
which(is.na(nas[110:150,]))
which(is.na(nas[105:110,]))
which(is.na(nas[104:110,]))
which(is.na(nas[100:110,]))
which(is.na(nas[100:105,]))
which(is.na(nas[100:101,]))
which(is.na(nas[100,]))
which(is.na(nas[100,65]))
dec.small[7,10,65]
dec.small[7,100,65]
weighted.mean(1:10, 0*(1:10))
enc.small[7,100,65]
enc.small[7,100,65,]
cc = enc.small[7,100,65,]
summ(cc)
sum(cc)
encoder
code = cc
threshold = 0.01
which.max(code)
encoder$centers[which.max(code)]
enc.small[is.na(enc.small)] = 0
dim(enc.small)
dec.small[is.na(dec.small)] = 0
prate.plotMap.fromSeries(dec.small,1)
summary(dec.small)
lon = lat = 51
rbm = model$rbms$rbm.51.51
up = RBMups$rbm.51.51
expand.grid(1,1)
expand.grid(51,51)
z = expand.grid(51,51)
batch = expand.grid(51,51)
dim(batch)
rbmUpLocal = list()
rbmLocal = list()
batch = batch[!is.na(batch[,1]),]
rbmUpLocal = list()
rbmLocal = list()
for(i in 1:dim(batch)[1])
{
rbmind = paste("rbm.",batch[i,1],'.',batch[i,2],sep="")
rbmUpLocal[[rbmind]] = rbmup[[rbmind]]
rbmLocal[[rbmind]] = model$rbms[[rbmind]]
}
library(deepnet)
lon = batch[i,1]
lat = batch[i,2]
lonDiap = lon:min(dims[2],lon+sectorWidth-1)
latDiap = lat:min(dims[3],lat+sectorHeight-1)
rbm = rbmLocal[[paste("rbm.",lon,'.',lat,sep="")]]
up = rbmUpLocal[[paste("rbm.",lon,'.',lat,sep="")]]
map=rbm.down(rbm,up)
dim(map)
dims
dim(map) = c(dims[1],sectorWidth,sectorHeight,encoder$numClusters)
dim(map)
map=decode(encoder,map)
dim(map)
length(dim(map))
dim(code[1:length(dim(code-1))])
dim(code)
code = enc.small
dim(code[1:length(dim(code-1))])
dim(code[1:(length(dim(code))-1)])
dim(code)[1:(length(dim(code))-1)]
dim(code)
model$cfg$numThreads
source("Rsource/auxilary.R")
source("Rsource/model.R")
RBMups = model.makeRBMup.l0(model,pratemap)
RBMdowns = model.makeRBMdown.l0(model,RBMups,dim(prate.transformed.diff))
map=rbm.down(rbm,up)
dim(ma)
dim(map)
dim(map) = c(dims[1],sectorWidth,sectorHeight,encoder$numClusters)
map=decode(encoder,map)
model.makeRBMdown.l0 = function(model,rbmup,dims)
{
require(foreach)
require(doSNOW)
require(deepnet)
values = array(0.,dim = dims)
normalizers =  array(0.,dim = dims)
print("performing parallel average RBM down")
#strategy: split data into batches and execute parallel algos for batches, not to transfer the whole model
cfg = model$cfg
offset.h = cfg$sector.offset.horizontal.l0
offset.v = cfg$sector.offset.vertical.l0
numHidden = cfg$rbm.numHidden.l0
sectorWidth = cfg$sector.width.l0
sectorHeight = cfg$sector.height.l0
order = cfg$model.order.l0
encoder = model$encoder
encode = encoder.encode
decode = encoder.decode
rbmsize = model$rbms[[1]]$size
modelLonDiap = 0:((dims[2]-1)/offset.h )*offset.h+1
modelLatDiap = 0:((dims[3]-1)/offset.v)*offset.v+1
batchSize = cfg$batchSize
pairCoords = expand.grid(modelLonDiap,modelLatDiap)
pairCoords = pairCoords[order(pairCoords[,1]), ]
cl <- makeCluster(cfg$numThreads)
registerDoSNOW(cl)
currLon = 0#is only used for progress reports
while(TRUE)
{
batch = pairCoords[1:batchSize,]
batch = batch[!is.na(batch[,1]),]
if (batch[1,1] != currLon)
{#report status
print(paste("processing lon",batch[1,1]))
currLon = batch[1,1]
}
rbmUpLocal = list()
rbmLocal = list()
for(i in 1:dim(batch)[1])
{
rbmind = paste("rbm.",batch[i,1],'.',batch[i,2],sep="")
rbmUpLocal[[rbmind]] = rbmup[[rbmind]]
rbmLocal[[rbmind]] = model$rbms[[rbmind]]
}
lres = foreach(i = 1:dim(batch)[1],.combine = "cbind",.noexport = "model") %dopar%
{
library(deepnet)
lon = batch[i,1]
lat = batch[i,2]
#check if this works for several days of rbmup at once
lonDiap = lon:min(dims[2],lon+sectorWidth-1)
latDiap = lat:min(dims[3],lat+sectorHeight-1)
rbm = rbmLocal[[paste("rbm.",lon,'.',lat,sep="")]]
up = rbmUpLocal[[paste("rbm.",lon,'.',lat,sep="")]]
map=rbm.down(rbm,up)
dim(map) = c(dims[1],length(lonDiap),length(latDiap),encoder$numClusters)
map=decode(encoder,map)
dim(map) = c(dims[1],length(lonDiap),length(latDiap))
#why not using sectorWidth: in age cases, length(lonDiap) < sectorWidth as the sector is on the edge of map
gc()
c(paste("rbm.",lon,'.',lat,sep=""), list(map),list(lonDiap),list(latDiap))
}
dim(lres) = c(4,nrow(batch))#eliminating one-element batch case (ncol = NULL)
for (r in 1:ncol(lres))
{
map = lres[[2,r]]
lonDiap = lres[[3,r]]
latDiap = lres[[4,r]]
values[,lonDiap,latDiap] = map+values[,lonDiap,latDiap]
normalizers[,lonDiap,latDiap] = 1+normalizers[,lonDiap,latDiap]
}
if (batchSize >= dim(pairCoords)[1])
break
pairCoords = pairCoords[(batchSize+1):dim(pairCoords)[1],]
}
stopCluster(cl)
gc()
ans = (values/normalizers)
return(ans)
}
RBMups = model.makeRBMup.l0(model,pratemap)
RBMups = model.makeRBMup.l0(model,pratemap)
RBMdowns = model.makeRBMdown.l0(model,RBMups,dim(prate.transformed.diff))
prate.plotMap.fromSeries(RBMdowns,1)
sum(is.na(RBMdowns))
prate.plotMap.fromSeries(RBMdowns,1)
prate.plotMap.fromSeries(pratemap,1)
qplot(x = c(10,25,50,60,100,200),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673)
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(10,25,50,60,100,200),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
library(ggplot2)
qplot(x = c(10,25,50,60,100,200),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
geom_line()
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
geom_line()
ggplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(x,y,
geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(x,y,
#geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
x = c(10,25,50,60,100)
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673)
ggplot(x,y,
#geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(x,y,
aes(x,y) + geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(x,y,
aes(x,y),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(c(x,y),
aes(x,y),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(aes(x,y),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
geom = "line"
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(10,25,50,60,100),
y = c(0.0601825, 0.02042611,0.01036832, 0.009761155, 0.007804673),
geom = "line",
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(50,100,200,300,500),
y = c(0.0242725,0.0170811,0.1355487,0.01137628,0.0099714),
geom = "line",
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
qplot(x = c(50,100,200,300,500),
y = c(0.0242725,0.0170811,0.0135548,0.01137628,0.0099714),
geom = "line",
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
install.packages("ts.plot")
library(plot.ts)
install.packages("plot.ts")
library(reshape2)
df = data.frame(numHidden = c(50,100,200,300,500),
rmse.serial = c(0.0242725,0.0170811,0.0135548,0.01137628,0.0099714),
rmse.nochange = rep(0.02736182,5),
rmse.arima = rep(0.01950351,5),
rmse.noSerial = rep(0.01318302,5))
ggplot(melt(df,id = "numHidden"),
aes(x=df$numHidden,y=value,colour=variable,group=variable)) + geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(melt(df,id = "numHidden"),
aes(x=df$numHidden,y=value,colour=variable,group=variable) + geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(melt(df,id = "numHidden"),
aes(x=numHidden,y=value,colour=variable,group=variable) + geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
melt(df,id = "numHidden")
df = melt(df,id = "numHidden")
ggplot(df,
aes(x=numHidden,y=value,colour=variable,group=variable) + geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
ggplot(df,
aes(x=df$numHidden,y=df$value,colour=df$variable,group=df$variable) + geom_line(),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
df$numHidden
y=df$value
df$value
variable
df$variable
aes(x=df$numHidden,y=df$value,colour=df$variable,group=df$variable)
ggplot(df,
aes(x=df$numHidden,y=df$value,colour=df$variable,group=df$variable),
main = "Transformed encoding RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")
df = data.frame(numHidden = c(50,100,200,300,500),
rmse.serial = c(0.0242725,0.0170811,0.0135548,0.01137628,0.0099714),
rmse.nochange = rep(0.02736182,5),
rmse.arima = rep(0.01950351,5),
rmse.noSerial = rep(0.01318302,5))
ggplot(df,aes(numHidden,rmse.serial))+geom_line(aes(color="First line"))+
geom_line(data=df,aes(color="Second line"))+
labs(color="Legend text")
ggplot(df,aes(numHidden,rmse.serial))+geom_line(aes(color="Serial"))+
geom_line(data=cbind(numHidden,rmse.noSerial),aes(color="Not serial"))+
labs(color="Legend text")
numHidden = c(50,100,200,300,500)
rmse.serial = c(0.0242725,0.0170811,0.0135548,0.01137628,0.0099714)
rmse.nochange = rep(0.02736182,5)
rmse.arima = rep(0.01950351,5)
rmse.noSerial = rep(0.01318302,5)
ggplot(df,aes(numHidden,rmse.serial))+geom_line(aes(color="Serial"))+
geom_line(data=cbind(numHidden,rmse.noSerial),aes(color="Not serial"))+
labs(color="models")
ggplot(df,aes(numHidden,rmse.serial))+geom_line(aes(color="Serial"))+
geom_line(data=as.data.frame(cbind(numHidden,rmse.noSerial)),aes(color="Not serial"))+
labs(color="models")
install.packages("xtsExtra")
ggplot()+geom_line(aes(x=numHidden,y=rmse.serial) col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3) + ylab("")
ggplot()+geom_line(aes(x=numHidden,y=rmse.serial) col=2)
ggplot()+geom_line(aes(x=numHidden,y=rmse.serial), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3) + ylab("")
rmse.noChange = rep(0.02736182,5)
ggplot(main = "Transformed one-day prediction RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")+
geom_line(aes(x=numHidden,y=rmse.serial), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,col=4)+
geom_line(aes(x=numHidden,y=rmse.arima),col=5)+
ylab("")
)
ggplot(main = "Transformed one-day prediction RMSE for spatial RBM layer",
xlab="Amount of hidden units",
ylab="encoder RMSE")+
geom_line(aes(x=numHidden,y=rmse.serial), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima),col=5)+
ylab("")
ggplot()+
geom_line(aes(x=numHidden,y=rmse.serial), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima),col=5)+
main("Transformed one-day prediction RMSE for spatial RBM layer")+
xlab("Amount of hidden units")+
ylab("encoder RMSE")+
ylab("")
ggplot()+
geom_line(aes(x=numHidden,y=rmse.serial), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE on crossvalidation")
ggplot()+
geom_line(aes(x=numHidden,y=rmse.serial), col=2,aes(color="Serial"))+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3,aes(color="Without serial"))+
geom_line(aes(x=numHidden,y=rmse.noChange),col=4,aes(color="By preceding day"))+
geom_line(aes(x=numHidden,y=rmse.arima),col=5,aes(color="ARIMA"))+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")
ggplot()+
geom_line(aes(x=numHidden,y=rmse.serial), col=2,aes(color="Serial"))+
geom_line(aes(x=numHidden,y=rmse.noSerial),col=3,aes(color="Without serial"))
ggplot()
ggplot()+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")
ggplot()+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
ggplot(data.frame(), main = "Prediction RMSE for one day")+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
ggplot(data.frame(),aes() main = "Prediction RMSE for one day predictions")+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
ggplot(data.frame(),aes(), main = "Prediction RMSE for one day predictions")+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
ggplot(x = numHidden,aes(), main = "Prediction RMSE for one day predictions")+
geom_line(aes(y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
ggplot(x = numHidden, main = "Prediction RMSE for one day predictions")+
geom_line(aes(y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
ggplot(data.frame(),aes(), main = "Prediction RMSE for one day predictions")+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
qplot(main = "Prediction RMSE for one day predictions")+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"), col=2)+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"),col=3)+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"),col=4)+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"),col=5)+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
qplot(main = "Prediction RMSE for one day predictions")+
geom_line(aes(x=numHidden,y=rmse.serial,color="Serial"))+
geom_line(aes(x=numHidden,y=rmse.noSerial,color = "WithoutSerial"))+
geom_line(aes(x=numHidden,y=rmse.noChange,color="By preceding day"))+
geom_line(aes(x=numHidden,y=rmse.arima,color="ARIMA"))+
xlab("Amount of hidden units")+
ylab("Prediction RMSE via crossvalidation")+
labs(color="Models")
load("models/n25xtest +state regL2 0.5.RData")
pratemap = prate.transformed
pratemap.matr = matrix(pratemap,nrow = prate.dims[1], ncol = prate.dims[2]*prate.dims[3])
pratemap.diff = diff(pratemap.matr)
dim(pratemap.diff) = dim(pratemap) - c(1,0,0)
rm(pratemap.matr)
rbmup = model.makeRBMup.base(model$rbm.l0,cfg,cfg$rbm.l0,pratemap.diff)
rbmdown = model.makeRBMdown.base(model$rbm.l0,cfg,cfg$rbm.l0,rbmup,dim(pratemap.diff))
save(rbmdown,file = "data/updown.Rdata")
source("Rsource/preproc.R")
source("Rsource/model.R")
model = object
pratemap = prate.transformed
pratemap.matr = matrix(pratemap,nrow = prate.dims[1], ncol = prate.dims[2]*prate.dims[3])
pratemap.diff = diff(pratemap.matr)
dim(pratemap.diff) = dim(pratemap) - c(1,0,0)
rm(pratemap.matr)
rbmup = model.makeRBMup.base(model$rbm.l0,cfg,cfg$rbm.l0,pratemap.diff)
rbmdown = model.makeRBMdown.base(model$rbm.l0,cfg,cfg$rbm.l0,rbmup,dim(pratemap.diff))
save(rbmdown,file = "data/updown.Rdata")
cfg = model$cfg
rbmup = model.makeRBMup.base(model$rbm.l0,cfg,cfg$rbm.l0,pratemap.diff)
rbmdown = model.makeRBMdown.base(model$rbm.l0,cfg,cfg$rbm.l0,rbmup,dim(pratemap.diff))
save(rbmdown,file = "data/updown.Rdata")
load("data/updown.Rdata")
prate.plotMap.fromDay.lattice(rbmdown[10,,])
part = 1:100
