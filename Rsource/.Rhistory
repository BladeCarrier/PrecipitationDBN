entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata)#,method = "lm")
model = nn.train(x = xdata,y=ydata,c(60,100,60))#,method = "lm")
model = nn.train(x = xdata,y=ydata,c(60,100,60),numepochs = 20,)#,method = "lm")
pxdatas = list()
pydatas = list()
models = list()
library(caret)
library(foreach)
modelLonDiap = 0:((dims[2]-1)/3 )*3+1
modelLatDiap = 0:((dims[3]-1)/3)*3+1
order = 3
for (lon in modelLonDiap)
for(lat in modelLatDiap)
{
rbm = allRBMs[[paste("rbm",lon,lat)]]
lonDiap = lon:min(dims[2],lon+10-1)
latDiap = lat:min(dims[3],lat+10-1)
cut = prate.transformed[,lonDiap,latDiap]
mm = as.matrix(x = cut)
dim(mm) = c(dim(cut)[1],10*10)
up = rbm.up(rbm,mm)
X=(order+1):dim(up)[1]
xdata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata,c(60,100,60),numepochs = 20,)#,method = "lm")
models[[paste("pdata",lon,lat)]] = model
}
pxdatas = list()
pydatas = list()
models = list()
library(caret)
library(foreach)
modelLonDiap = 0:((dims[2]-1)/3 )*3+1
modelLatDiap = 0:((dims[3]-1)/3)*3+1
order = 3
for (lon in modelLonDiap)
for(lat in modelLatDiap)
{
rbm = allRBMs[[paste("rbm",lon,lat)]]
lonDiap = lon:min(dims[2],lon+10-1)
latDiap = lat:min(dims[3],lat+10-1)
cut = prate.transformed[,lonDiap,latDiap]
mm = as.matrix(x = cut)
dim(mm) = c(dim(cut)[1],min(dims[2],lon+10-1)*min(dims[3],lat+10-1))
up = rbm.up(rbm,mm)
X=(order+1):dim(up)[1]
xdata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata,c(60,100,60),numepochs = 20,)#,method = "lm")
models[[paste("pdata",lon,lat)]] = model
}
pxdatas = list()
pydatas = list()
models = list()
library(caret)
library(foreach)
modelLonDiap = 0:((dims[2]-1)/3 )*3+1
modelLatDiap = 0:((dims[3]-1)/3)*3+1
order = 3
for (lon in modelLonDiap)
for(lat in modelLatDiap)
{
rbm = allRBMs[[paste("rbm",lon,lat)]]
lonDiap = lon:min(dims[2],lon+10-1)
latDiap = lat:min(dims[3],lat+10-1)
cut = prate.transformed[,lonDiap,latDiap]
mm = as.matrix(x = cut)
dim(mm) = c(dim(cut)[1],length(lonDiap)*length(latDiap))
up = rbm.up(rbm,mm)
X=(order+1):dim(up)[1]
xdata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata,c(60,100,60),numepochs = 20,)#,method = "lm")
models[[paste("pdata",lon,lat)]] = model
}
pxdatas = list()
pydatas = list()
models = list()
library(caret)
library(foreach)
modelLonDiap = 0:((dims[2]-1)/3 )*3+1
modelLatDiap = 0:((dims[3]-1)/3)*3+1
order = 3
for (lon in modelLonDiap)
for(lat in modelLatDiap)
{
rbm = allRBMs[[paste("rbm",lon,lat)]]
lonDiap = lon:min(dims[2],lon+10-1)
latDiap = lat:min(dims[3],lat+10-1)
cut = prate.transformed[,lonDiap,latDiap]
mm = as.matrix(x = cut)
dim(mm) = c(dim(cut)[1],length(lonDiap)*length(latDiap))
up = rbm.up(rbm,mm)
X=(order+1):dim(up)[1]
xdata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata,c(100,100,60),numepochs = 20,)#,method = "lm")
models[[paste("pdata",lon,lat)]] = model
}
View(map1)
library("ncdf")
library("ggplot2")
prate.transform = function(p)
{
return(p^0.2 *5)
}
prate.restore = function(p)
{
return ((p*0.2)^5)
}
prate.rmse = function(map1,map2)
{
return (sum((map1 - map2)^2)/length(map1))
}
prate.toMap = function( dayMap)
{
pts = data.frame(1:length(dayMap))
pts$x=(1:length(dayMap) -1)%%nrow(dayMap)+1
pts$y=(1:length(dayMap)-1)%/%nrow(dayMap)+1
pts$prate=matrix(dayMap,nrow =length(dayMap))
return(pts)
}
prate.plotMap.fromSeries = function(prate,day)
{
pts = prate.toMap(prate[day,,])
qplot( pts$x,pts$y, color =  -pts$prate)
}
prate.plotMap.fromDay = function(dayMap)
{
pts = prate.toMap(dayMap)
qplot( pts$x,pts$y, color =  -pts$prate)
}
nc = open.ncdf("C:\\data\\eco-prate\\98cpy.nc")
prate = get.var.ncdf(nc,"prate")
prate[prate < 0] = 0
prate = aperm(prate, c(3,1,2))
LEN = dim(prate)[1]
prate.original = prate
prate.transformed = transform(prate)
dim(prate.transformed) = dim(prate)
dim(prate.transformed)
dim(prate)
dim(prate.transformed) = dim(prate)
length(prate.transformed)
prate[1]
prate[1,]
prate.transformed[1,]
LEN = dim(prate)[1]
prate.original = prate
prate.transformed = transform(prate)
dim(prate.transformed) = dim(prate)
dim(prate.transformed) = dim(prate.original)
prate.transformed = as.array(transform(prate))
dim(prate.transformed) = dim(prate.original)
prate.transformed = as.array(transform(prate))
prate.transformed = transform(as.vector(prate))
dim(prate.transformed) = dim(prate.original)
prate.transformed = prate.transform(prate)
dim(prate.transformed) = dim(prate.original)
library("caret")
library("deepnet")
#warning: this guy learns the transformed values
getRBM = function(pratemap,lon,lat)
dims = dim(pratemap)
{
sectorWidth = 10
sectorHeight = 10
LonDiap = lon:min(lon+sectorWidth-1,dims[2])
}
#warning: this guy learns the transformed values
getRBM = function(pratemap,lon,lat)
{
dims = dim(pratemap)
sectorWidth = 10
sectorHeight = 10
LonDiap = lon:min(lon+sectorWidth-1,dims[2])
LatDiap = lat:min(lat+sectorHeight-1,dims[3])
cut = pratemap[,LonDiap,LatDiap]
cut = prate.transform(cut)
mm = matrix(cut,nrow = dims[[1]],ncol = length(LonDiap)*length(LatDiap))
model = rbm.train(mm,hidden = 20,numepochs = 10)
return (model)
}
getAllRbms = function(pratemap)
{
library(foreach)
library(doSNOW)
rbms = list()
dims =dim(pratemap)
cl <- makeCluster(3)
registerDoSNOW(cl)
for (lon in 0:((dims[2]-1)/3 )*3+1)
{
lres = foreach(lat=0:((dims[3]-1)/3)*3+1, .combine='cbind') %dopar%
{
prate.transform = function(p)
{
return(p^0.2 *5)
}
library(deepnet)
dims = dim(pratemap)
sectorWidth = 10
sectorHeight = 10
LonDiap = lon:min(lon+sectorWidth-1,dims[2])
LatDiap = lat:min(lat+sectorHeight-1,dims[3])
cut = pratemap[,LonDiap,LatDiap]
cut = prate.transform(cut)
mm = matrix(cut,nrow = dims[[1]],ncol = length(LonDiap)*length(LatDiap))
model = rbm.train(mm,hidden = 20,numepochs = 10)
c(paste("rbm",lon,lat), list(model))
}
for (r in 1:ncol(lres))
{
rbms[lres[[1,r]]] = list(lres[[2,r]])
}
}
stopCluster(cl)
return(rbms)
}
allRBMs = getAllRbms(prate_adj)
getRBM = function(pratemap,lon,lat)
{
dims = dim(pratemap)
sectorWidth = 10
sectorHeight = 10
LonDiap = lon:min(lon+sectorWidth-1,dims[2])
LatDiap = lat:min(lat+sectorHeight-1,dims[3])
cut = pratemap[,LonDiap,LatDiap]
mm = matrix(cut,nrow = dims[[1]],ncol = length(LonDiap)*length(LatDiap))
model = rbm.train(mm,hidden = 20,numepochs = 10)
return (model)
}
getAllRbms = function(pratemap)
{
library(foreach)
library(doSNOW)
rbms = list()
dims =dim(pratemap)
cl <- makeCluster(3)
registerDoSNOW(cl)
for (lon in 0:((dims[2]-1)/3 )*3+1)
{
lres = foreach(lat=0:((dims[3]-1)/3)*3+1, .combine='cbind') %dopar%
{
library(deepnet)
dims = dim(pratemap)
sectorWidth = 10
sectorHeight = 10
LonDiap = lon:min(lon+sectorWidth-1,dims[2])
LatDiap = lat:min(lat+sectorHeight-1,dims[3])
cut = pratemap[,LonDiap,LatDiap]
mm = matrix(cut,nrow = dims[[1]],ncol = length(LonDiap)*length(LatDiap))
model = rbm.train(mm,hidden = 20,numepochs = 10)
c(paste("rbm",lon,lat), list(model))
}
for (r in 1:ncol(lres))
{
rbms[lres[[1,r]]] = list(lres[[2,r]])
}
}
stopCluster(cl)
return(rbms)
}
allRBMs = getAllRbms(prate.transformed)
library(foreach)
library(doSNOW)
getNNModels = function()
{
modelLonDiap = 0:((dims[2]-1)/3 )*3+1
modelLatDiap = 0:((dims[3]-1)/3)*3+1
order = 3
for (lon in modelLonDiap)
for(lat in modelLatDiap)
{
rbm = allRBMs[[paste("rbm",lon,lat)]]
lonDiap = lon:min(dims[2],lon+10-1)
latDiap = lat:min(dims[3],lat+10-1)
cut = prate.transformed[,lonDiap,latDiap]
mm = as.matrix(x = cut)
dim(mm) = c(dim(cut)[1],length(lonDiap)*length(latDiap))
up = rbm.up(rbm,mm)
X=(order+1):dim(up)[1]
xdata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata,c(100,100,60),numepochs = 20,)#,method = "lm")
models[[paste("pdata",lon,lat)]] = model
}
}
pxdatas = list()
pydatas = list()
models = list()
getNNModels()
getNNModels = function(pratemap)
{
dims =dim(pratemap)
modelLonDiap = 0:((dims[2]-1)/3 )*3+1
modelLatDiap = 0:((dims[3]-1)/3)*3+1
order = 3
for (lon in modelLonDiap)
for(lat in modelLatDiap)
{
rbm = allRBMs[[paste("rbm",lon,lat)]]
lonDiap = lon:min(dims[2],lon+10-1)
latDiap = lat:min(dims[3],lat+10-1)
cut = pratemap[,lonDiap,latDiap]
mm = as.matrix(x = cut)
dim(mm) = c(dim(cut)[1],length(lonDiap)*length(latDiap))
up = rbm.up(rbm,mm)
X=(order+1):dim(up)[1]
xdata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
for (t in 1:order)
entry[[paste("x",-t,w)]] = up[day-t,w]
}
entry
}
xdata = as.matrix(xdata)
pxdatas[[paste("pdata",lon,lat)]] = xdata
ydata = foreach(day = X, .combine = "rbind") %do%
{
entry = vector()
for (w in 1:rbm$size[2])
{
entry[[paste("y",w)]] = up[day,w]
}
entry
}
ydata = as.matrix(ydata)
pydatas[[paste("pdata",lon,lat)]] = ydata
model = nn.train(x = xdata,y=ydata,c(100,100,60),numepochs = 20,)#,method = "lm")
models[[paste("pdata",lon,lat)]] = model
}
}
getNNModels(prate.transformed)
source("Rsource/preproc.R")
source("Rsource/model.R")
#todo list:
#0) get sigma and inverse sigma
#1) predict method and getLinearModels method using both state and difference
#2) check model optimal lambdas, mb try lower/higher
#3) find best tune for one-layer rbm: minimize constant zeroes, maximize out-of-sample clusterability (in guide: likelihood)
#4) experiment with time'of'year codes, krigging decay, multilevels, tree predictors, etc.
#make generic in-batch parallel = function(batchsize,taskIndices, innerFunction) to use in makeRBMs, etc?
cfg = list()
cfg$numThreads=6
cfg$batchSize = cfg$numThreads
cfg$path = "models/"
cfg$name = "test"#"n100x16x12 o8x6 regL2 0.5"
cfg$rbm.l0 = list()
cfg$rbm.l0$sector.width = 16
cfg$rbm.l0$sector.height = 12
cfg$rbm.l0$sector.offset.horizontal = 80
cfg$rbm.l0$sector.offset.vertical = 60
cfg$rbm.l0$numHidden = 5
cfg$rbm.l0$numEpochs = 1
cfg$rbm.l0$learningRate = 0.03
cfg$rbm.l0$encoder = encoder.init(diap = c(-0.75,0.75),numClusters = 15)
# cfg$rbm.l0 = list()
# cfg$rbm.l0$sector.width = 16
# cfg$rbm.l0$sector.height = 12
# cfg$rbm.l0$sector.offset.horizontal = 8
# cfg$rbm.l0$sector.offset.vertical = 6
# cfg$rbm.l0$numHidden = 100
# cfg$rbm.l0$numEpochs = 200
# cfg$rbm.l0$learningRate = 0.03
# cfg$rbm.l0$encoder = encoder.init(diap = c(-0.75,0.75),numClusters = 15)
#
# cfg$rbm.state.l0 = list()
# cfg$rbm.state.l0$sector.width = 16
# cfg$rbm.state.l0$sector.height = 12
# cfg$rbm.state.l0$sector.offset.horizontal = 8
# cfg$rbm.state.l0$sector.offset.vertical = 6
# cfg$rbm.state.l0$numHidden = 25
# cfg$rbm.state.l0$numEpochs = 50
# cfg$rbm.state.l0$learningRate = 0.1
# cfg$rbm.state.l0$encoder = encoder.init(diap = c(-0.15,1.05),numClusters = 12)
cfg$pred.l0 = list()
cfg$pred.l0$order = 3
cfg$pred.l0$reg.L2 = 0.5
#kriging decays?
model = model.assemble(cfg,prate.transformed,andsave = TRUE)
source("Rsource/preproc.R")
source("Rsource/model.R")
